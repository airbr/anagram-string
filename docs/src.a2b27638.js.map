{"version":3,"sources":["src/variations.js","src/index.js"],"names":["isAnagram","str1","str2","length","console","log","createCharacterMap","text","map","char","toLowerCase","hasOwnProperty","str1map","str2map","module","exports","answer1","document","querySelector","wordsa","wordsb","addEventListener","value1","value","value2","textContent","setTimeout"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["/** \n * @param {string} string 1, \n * @param {string} string 2,\n * @return {string} result of anagram comparison\n */\nfunction isAnagram(str1, str2) {\n\n  // Earliest correct exit opportunity: identical strings are anagram\n  if(str1 === str2) {\n    return \"ANAGRAM\";\n  }\n  // Are the strings the same length? Exit if not;\n  if (str1.length !== str2.length) {\n    console.log('Strings not same length');\n    return \"NOT ANAGRAM!\";\n  }\n  // Function to create character map from a string\n  function createCharacterMap(text) {\n    let map = {};\n    for (let char of text) {\n        char = char.toLowerCase();\n        if (map.hasOwnProperty(char)) {\n            map[char]++;\n        } else {\n            map[char] = 1;\n        }\n    }\n    return map;\n  }\n  // Create Character Maps\n  const str1map = createCharacterMap(str1);\n  const str2map = createCharacterMap(str2);\n\n  // Is character in str1 in str2?\n  // NB: Issue of characters existing in str2 but not str1 addressed by string length check\n  for (let char in str1map) {\n    if (str1map[char] !== str2map[char]) {\n      return \"NOT ANAGRAM!\";\n    }\n  }\n \n  return \"ANAGRAM!\";\n}\n\nmodule.exports = { isAnagram };\n","import {\n  isAnagram\n} from \"./variations.js\";\n\nconst answer1 = document.querySelector(\"#answer1\");\n\nconst wordsa = document.querySelector(\"#wordsa\");\n\nconst wordsb = document.querySelector(\"#wordsb\");\n\nwordsa.addEventListener(\"keyup\", function() {\n  const value1 = wordsa.value;\n  const value2 = wordsb.value;\n  answer1.textContent = isAnagram(value1, value2);\n});\n\nwordsb.addEventListener(\"keyup\", function() {\n  const value1 = wordsa.value;\n  const value2 = wordsb.value;\n  answer1.textContent = isAnagram(value1, value2);\n});\n\nwordsa.addEventListener('paste', function() {\n  setTimeout(function() {\n      const value1 = wordsa.value;\n      const value2 = wordsb.value;\n      answer1.textContent = isAnagram(value1, value2);\n    });\n});\n\nwordsb.addEventListener('paste', function() {\n  setTimeout(function() {\n    const value1 = wordsa.value;\n    const value2 = wordsb.value;\n    answer1.textContent = isAnagram(value1, value2);\n    });\n});"]}