{"mappings":"MA8CAA,EAAiB,C,UAzCjB,SAAmBC,EAAcC,GAI/B,GAAGD,IAASC,EACV,MAAO,UAGT,GAAID,EAAKE,SAAWD,EAAKC,OAEvB,OADAC,QAAQC,IAAI,2BACL,eAIT,SAASC,EAAmBC,GAC1B,IAAIC,EAAW,CAAC,EAChB,IAAK,IAAIC,KAAQF,EACbE,EAAOA,EAAKC,cACRF,EAAIG,eAAeF,GACnBD,EAAIC,KAEJD,EAAIC,GAAQ,EAGpB,OAAOD,CACT,CAEA,MAAMI,EAAUN,EAAmBL,GAC7BY,EAAUP,EAAmBJ,GAInC,IAAK,IAAIO,KAAQG,EACf,GAAIA,EAAQH,KAAUI,EAAQJ,GAC5B,MAAO,eAIX,MAAO,UACT,GCvCA,MAAMK,EAAUC,SAASC,cAAc,YAEjCC,EAASF,SAASC,cAAc,WAEhCE,EAASH,SAASC,cAAc,WAEtCC,EAAOE,iBAAiB,SAAS,WAC/B,MAAMC,EAASH,EAAOI,MAChBC,EAASJ,EAAOG,MACtBP,EAAQS,aAAc,EAAAvB,EAAAwB,WAAUJ,EAAQE,EAC1C,IAEAJ,EAAOC,iBAAiB,SAAS,WAC/B,MAAMC,EAASH,EAAOI,MAChBC,EAASJ,EAAOG,MACtBP,EAAQS,aAAc,EAAAvB,EAAAwB,WAAUJ,EAAQE,EAC1C,IAEAL,EAAOE,iBAAiB,SAAS,WAC/BM,YAAW,WACP,MAAML,EAASH,EAAOI,MAChBC,EAASJ,EAAOG,MACtBP,EAAQS,aAAc,EAAAvB,EAAAwB,WAAUJ,EAAQE,EAC1C,GACJ,IAEAJ,EAAOC,iBAAiB,SAAS,WAC/BM,YAAW,WACT,MAAML,EAASH,EAAOI,MAChBC,EAASJ,EAAOG,MACtBP,EAAQS,aAAc,EAAAvB,EAAAwB,WAAUJ,EAAQE,EACxC,GACJ","sources":["src/variations.ts","src/index.ts"],"sourcesContent":["/** \n * @param {string} string 1, \n * @param {string} string 2,\n * @return {string} result of anagram comparison\n */\nfunction isAnagram(str1: string, str2: string) {\n\n\n  // Earliest correct exit opportunity: identical strings are anagram\n  if(str1 === str2) {\n    return \"ANAGRAM\";\n  }\n  // Are the strings the same length? Exit if not;\n  if (str1.length !== str2.length) {\n    console.log('Strings not same length');\n    return \"NOT ANAGRAM!\";\n  }\n\n  // Function to create character map from a string\n  function createCharacterMap(text: string) {\n    let map: any = {};\n    for (let char of text) {\n        char = char.toLowerCase();\n        if (map.hasOwnProperty(char)) {\n            map[char]++;\n        } else {\n            map[char] = 1;\n        }\n    }\n    return map;\n  }\n  // Create Character Maps\n  const str1map = createCharacterMap(str1);\n  const str2map = createCharacterMap(str2);\n\n  // Is character in str1 in str2?\n  // NB: Issue of characters existing in str2 but not str1 addressed by string length check\n  for (let char in str1map) {\n    if (str1map[char] !== str2map[char]) {\n      return \"NOT ANAGRAM!\";\n    }\n  }\n \n  return \"ANAGRAM!\";\n}\n\nmodule.exports = { isAnagram };\n","import {\n  isAnagram\n} from \"./variations\";\n// TODO: Fix this module error^ \n\nconst answer1 = document.querySelector(\"#answer1\");\n\nconst wordsa = document.querySelector(\"#wordsa\");\n\nconst wordsb = document.querySelector(\"#wordsb\");\n\nwordsa.addEventListener(\"keyup\", function() {\n  const value1 = wordsa.value;\n  const value2 = wordsb.value;\n  answer1.textContent = isAnagram(value1, value2);\n});\n\nwordsb.addEventListener(\"keyup\", function() {\n  const value1 = wordsa.value;\n  const value2 = wordsb.value;\n  answer1.textContent = isAnagram(value1, value2);\n});\n\nwordsa.addEventListener('paste', function() {\n  setTimeout(function() {\n      const value1 = wordsa.value;\n      const value2 = wordsb.value;\n      answer1.textContent = isAnagram(value1, value2);\n    });\n});\n\nwordsb.addEventListener('paste', function() {\n  setTimeout(function() {\n    const value1 = wordsa.value;\n    const value2 = wordsb.value;\n    answer1.textContent = isAnagram(value1, value2);\n    });\n});"],"names":["$bf2792caaa81c5e5$exports","str1","str2","length","console","log","createCharacterMap","text","map","char","toLowerCase","hasOwnProperty","str1map","str2map","$b4e14b6b8da86996$var$answer1","document","querySelector","$b4e14b6b8da86996$var$wordsa","$b4e14b6b8da86996$var$wordsb","addEventListener","value1","value","value2","textContent","isAnagram","setTimeout"],"version":3,"file":"index.74dc7531.js.map"}